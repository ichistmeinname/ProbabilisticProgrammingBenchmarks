var santaGame = function(n) {
  return fromTo(1,n);
};

var fromTo = function(n,m) {
  if (n > m) {
    return [];
  } else if (n == m) {
    return [n];
  } else {
    return [n].concat(fromTo(n+1,m));
  }
};

var remove = function (x,arr) {
  var remove2 = function (x,arr,i) {
    if (i >= arr.length) {
        return [];
    } else {
      var y = arr[i];
      if (x == y) {
        return remove2(x,arr,i+1);
      } else {
        return [y].concat(remove2(x,arr,i+1));
      }
    }
  }
  return remove2(x,arr,0);
};

var pPicks = function (p,hat) {
  if (hat.length == 0) {
    return { nothing : true }
  } else {
    var x = uniformDraw(hat);
    var hatNew = remove(x,hat);
    return { nothing : false
           , getter : x
           , hatNew : hatNew
           };
  }
};

var pickRound = function(hat) {
  if (hat.length === 0) {
    return {failed : true};
  } else {
    var pickRound2 = function(ps, hat, arrs, n) {
      if (n >= ps.length) {
        return { failed : false
               , assignments : arrs
               };
      } else {
        var giver = ps[n];
        var assgnmnt = pPicks(giver,hat);
        if (assgnmnt.nothing) {
          return { failed : true };
        } else {
          pickRound2( ps
                    , assgnmnt.hatNew
                    , arrs.concat({ giver : giver
                                  , getter : assgnmnt.getter
                                  })
                    , n+1);
        }
      }
    };
    pickRound2(hat,hat,[],0);
  }
};

var pickRound2 = function(hat) {
  if (hat.length === 0) {
    return {failed : true};
  } else {
    var pickRound3 = function(ps, hat, arrs, n) {
      if (n >= ps.length) {
        return { failed : false
               , assignments : arrs
               };
      } else {
        var giver = ps[n];
        var newHat = remove(giver,hat);
        var assgnmnt = pPicks(giver,newHat);
        if (assgnmnt.nothing) {
          return { failed : true
                 , assignments : arrs // not necessary, but helpful for tests
                 };
        } else {
          pickRound3( ps
                    , remove(assgnmnt.getter, hat)
                    , arrs.concat({ giver : giver
                                  , getter : assgnmnt.getter
                                  })
                    , n+1);
        }
      }
    };
    pickRound3(hat,hat,[],0);
  }
};

var isInvalid = function(assgnmnt) {
  return (assgnmnt.failed || any( function (a) { a.getter === a.giver }, assgnmnt.assignments));
};

var args = process.argv;
if (args.length == 4) {
  var len = args[3]
  Infer({model: function() { isInvalid(pickRound(santaGame(len))) }, method: 'enumerate', maxRuntimeInMS: Infinity});
} else if (args.length == 5) {
  var len = args[4];
  Infer({model: function() { isInvalid(pickRound2(santaGame(len))) }, method: 'enumerate', maxRuntimeInMS: Infinity});
}
